name: Release Build

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  checks: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/rover
  BUILDX_NO_DEFAULT_LOAD: true
  DOCKER_BUILDKIT: 1

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.matrix }}
      agents: ${{ steps.agents.outputs.matrix }}
    steps:
      - id: platforms
        run: |
          echo "matrix=[\"linux/amd64\", \"linux/arm64\"]" >> $GITHUB_OUTPUT
      - id: agents
        run: |
          echo "matrix=[\"github\", \"tfc\", \"gitlab\", \"azure_devops\"]" >> $GITHUB_OUTPUT

  build-base:
    needs: matrix-prep
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.matrix-prep.outputs.platforms) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.ref_name }}-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-${{ matrix.platform }}
          build-args: |
            TARGETARCH=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USERNAME=vscode
            versionVault=$(./scripts/parse_versions.sh tool vault)
            versionGolang=$(./scripts/parse_versions.sh tool golang)
            versionKubectl=$(./scripts/parse_versions.sh tool kubectl)
            versionKubelogin=$(./scripts/parse_versions.sh tool kubelogin)
            versionDockerCompose=$(./scripts/parse_versions.sh tool docker_compose)
            versionTerraformDocs=$(./scripts/parse_versions.sh tool terraform_docs)
            versionPacker=$(./scripts/parse_versions.sh tool packer)
            versionPowershell=$(./scripts/parse_versions.sh tool powershell)
            versionAnsible=$(./scripts/parse_versions.sh tool ansible)
            extensionsAzureCli=$(./scripts/parse_versions.sh tool azure_cli)
            versionTerrascan=$(./scripts/parse_versions.sh tool terrascan)
            versionTfupdate=$(./scripts/parse_versions.sh tool tfupdate)
            versionTerraform=$(./scripts/parse_versions.sh terraform | head -n1)

  build-agents:
    needs: [build-base, matrix-prep]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.matrix-prep.outputs.platforms) }}
        agent: ${{ fromJson(needs.matrix-prep.outputs.agents) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push agent
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./agents/${{ matrix.agent }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-agent-${{ matrix.agent }}:${{ github.event.release.tag_name }}-${{ matrix.platform }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-agent-${{ matrix.agent }}:latest-${{ matrix.platform }}
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ github.ref_name }}-agent-${{ matrix.platform }}-${{ matrix.agent }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-agent-${{ matrix.platform }}-${{ matrix.agent }}
          build-args: |
            TARGETARCH=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USERNAME=vscode
            versionGithubRunner=$(./scripts/parse_versions.sh tool github_runner)
            versionAzdo=$(./scripts/parse_versions.sh tool azdo)
            versionTfc=$(./scripts/parse_versions.sh tool tfc)



  release-notes:
    needs: [security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate release notes
        id: release-notes
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: release-drafter.yml
          publish: false
          prerelease: false
          
      - name: Update release
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const release_id = context.payload.release.id;
            const notes = `${{ steps.release-notes.outputs.body }}`;
            
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id,
              body: notes
            });

  build-report:
    needs: [build-base, build-agents, release-notes]
    permissions:
      checks: write
      pull-requests: write
      contents: read
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate build report
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            
            const buildSummary = [
              '# Release Build & Security Report',
              '',
              '## Base Image',
              '- linux/amd64',
              '- linux/arm64',
              '',
              '## Agents',
              '- github',
              '- tfc',
              '- gitlab',
              '- azure_devops',
              '',
              '## Security Status',
              '- Security scanning disabled',
              '',
              `Overall Status: ${status}`,
              '',
              '## Release Information',
              `- Version: ${process.env.GITHUB_REF_NAME}`,
              `- Images: ${process.env.REGISTRY}/${process.env.IMAGE_NAME}`
            ].join('\n');
            
            await github.rest.checks.create({
              owner,
              repo,
              name: 'Release Build & Security Check',
              head_sha: context.sha,
              status: 'completed',
              conclusion: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              output: {
                title: `Release Build ${status}`,
                summary: buildSummary
              }
            });
