---
name: PR Build & Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

env:
  BUILDKIT_PROGRESS: plain
  BUILDKIT_COLORS: 1
  BUILDKIT_STEP_LOG_MAX_SIZE: 10485760
  BUILDKIT_STEP_LOG_MAX_SPEED: 10485760
  DOCKER_BUILDKIT: 1
  DOCKER_SCAN_SUGGEST: false
  BUILDX_NO_DEFAULT_LOAD: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/rover

permissions:
  contents: read
  packages: write
  checks: write
  pull-requests: write
  actions: read
  id-token: write
  statuses: write
  security-events: write

defaults:
  run:
    shell: bash

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.matrix }}
      agents: ${{ steps.agents.outputs.matrix }}
    steps:
      - id: platforms
        run: |
          echo "matrix=[\"linux/amd64\", \"linux/arm64\"]" >> $GITHUB_OUTPUT
      - id: agents
        run: |
          echo "matrix=[\"github\", \"tfc\", \"gitlab\", \"azure_devops\"]" >> $GITHUB_OUTPUT
      - id: exclude
        run: |
          echo "matrix=[{\"platform\":\"linux/arm64\",\"agent\":\"tfc\"}]" >> $GITHUB_OUTPUT

  build-base:
    needs: matrix-prep
    runs-on: ubuntu-latest
    outputs:
      github_runner: ${{ steps.versions.outputs.github_runner }}
      azdo: ${{ steps.versions.outputs.azdo }}
      tfc: ${{ steps.versions.outputs.tfc }}
      docker_compose: ${{ steps.versions.outputs.docker_compose }}
      golang: ${{ steps.versions.outputs.golang }}
      ansible: ${{ steps.versions.outputs.ansible }}
      azure_cli: ${{ steps.versions.outputs.azure_cli }}
    strategy:
      matrix:
        platform: ${{ fromJson(needs.matrix-prep.outputs.platforms) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/rover
          tags: |
            type=sha,prefix=pr-
            type=ref,event=pr

      - name: Parse versions
        id: versions
        run: |
          echo "vault=$(./scripts/parse_versions.sh tool vault)" >> $GITHUB_OUTPUT
          echo "golang=$(./scripts/parse_versions.sh tool golang)" >> $GITHUB_OUTPUT
          echo "kubectl=$(./scripts/parse_versions.sh tool kubectl)" >> $GITHUB_OUTPUT
          echo "kubelogin=$(./scripts/parse_versions.sh tool kubelogin)" >> $GITHUB_OUTPUT
          echo "docker_compose=$(./scripts/parse_versions.sh tool docker_compose)" >> $GITHUB_OUTPUT
          echo "terraform_docs=$(./scripts/parse_versions.sh tool terraform_docs)" >> $GITHUB_OUTPUT
          echo "packer=$(./scripts/parse_versions.sh tool packer)" >> $GITHUB_OUTPUT
          echo "powershell=$(./scripts/parse_versions.sh tool powershell)" >> $GITHUB_OUTPUT
          echo "ansible=$(./scripts/parse_versions.sh tool ansible)" >> $GITHUB_OUTPUT
          echo "azure_cli=$(./scripts/parse_versions.sh tool azure_cli)" >> $GITHUB_OUTPUT
          echo "terrascan=$(./scripts/parse_versions.sh tool terrascan)" >> $GITHUB_OUTPUT
          echo "tfupdate=$(./scripts/parse_versions.sh tool tfupdate)" >> $GITHUB_OUTPUT
          echo "terraform=$(./scripts/parse_versions.sh terraform | head -n1)" >> $GITHUB_OUTPUT

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          network: host
          allow: network.host
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ contains(matrix.platform, 'amd64') && 'amd64' || 'arm64' }}
            ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-latest-${{ contains(matrix.platform, 'amd64') && 'amd64' || 'arm64' }}
          target: base
          platforms: ${{ matrix.platform }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-latest-${{ contains(matrix.platform, 'amd64') && 'amd64' || 'arm64' }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-latest-${{ contains(matrix.platform, 'amd64') && 'amd64' || 'arm64' }},mode=max
          outputs: |
            type=registry,compression=zstd,compression-level=3,force-compression=true
            type=image,compression=zstd,compression-level=3,force-compression=true
          provenance: false
          sbom: false
          build-args: |
            TARGETARCH=${{ contains(matrix.platform, 'amd64') && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USER_UID=1000
            USER_GID=1000
            USERNAME=vscode
            versionVault=${{ steps.versions.outputs.vault }}
            versionGolang=${{ steps.versions.outputs.golang }}
            versionKubectl=${{ steps.versions.outputs.kubectl }}
            versionKubelogin=${{ steps.versions.outputs.kubelogin }}
            versionDockerCompose=${{ steps.versions.outputs.docker_compose }}
            versionTerraformDocs=${{ steps.versions.outputs.terraform_docs }}
            versionPacker=${{ steps.versions.outputs.packer }}
            versionPowershell=${{ steps.versions.outputs.powershell }}
            versionAnsible=${{ steps.versions.outputs.ansible }}
            extensionsAzureCli=${{ steps.versions.outputs.azure_cli }}
            versionTerrascan=${{ steps.versions.outputs.terrascan }}
            versionTfupdate=${{ steps.versions.outputs.tfupdate }}
            versionTerraform=${{ steps.versions.outputs.terraform }}
      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

  build-agents:
    needs: [build-base, matrix-prep]
    runs-on: ubuntu-latest
    outputs:
      result: success
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            agent: github
          - platform: linux/amd64
            agent: tfc
          - platform: linux/amd64
            agent: gitlab
          - platform: linux/amd64
            agent: azure_devops
          - platform: linux/arm64
            agent: github
          - platform: linux/arm64
            agent: gitlab
          - platform: linux/arm64
            agent: azure_devops
      fail-fast: false
    continue-on-error: true
    env:
      BUILDKIT_PROGRESS: plain
      BUILDKIT_COLORS: 1
      BUILDKIT_STEP_LOG_MAX_SIZE: 10485760
      BUILDKIT_STEP_LOG_MAX_SPEED: 10485760
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse agent versions
        id: versions
        run: |
          echo "github_runner=$(./scripts/parse_versions.sh agent github_runner)" >> $GITHUB_OUTPUT
          echo "azdo=$(./scripts/parse_versions.sh agent azdo)" >> $GITHUB_OUTPUT
          echo "tfc=$(./scripts/parse_versions.sh agent tfc)" >> $GITHUB_OUTPUT

      - name: Build and push agent
        id: build-agent
        uses: docker/build-push-action@v5
        with:
          context: .
          network: host
          allow: network.host
          file: ./agents/${{ matrix.agent }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ matrix.agent }}-${{ github.sha }}-${{ contains(matrix.platform, 'amd64') && 'amd64' || 'arm64' }}
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ matrix.agent }}-latest-${{ contains(matrix.platform, 'amd64') && 'amd64' || 'arm64' }}
          platforms: ${{ matrix.platform }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ matrix.agent }}-latest-${{ contains(matrix.platform, 'amd64') && 'amd64' || 'arm64' }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ matrix.agent }}-latest-${{ contains(matrix.platform, 'amd64') && 'amd64' || 'arm64' }},mode=max
          outputs: |
            type=registry,compression=zstd,compression-level=3,force-compression=true
            type=image,compression=zstd,compression-level=3,force-compression=true
          build-contexts: |
            base=docker-image://${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ contains(matrix.platform, 'amd64') && 'amd64' || 'arm64' }}
          provenance: false
          sbom: false
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            GITHUB_REPOSITORY=${{ github.repository }}
            GITHUB_SHA=${{ github.sha }}
            TARGETARCH=${{ contains(matrix.platform, 'amd64') && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USERNAME=vscode
            versionGithubRunner=${{ steps.versions.outputs.github_runner }}
            versionAzdo=${{ steps.versions.outputs.azdo }}
            versionTfc=${{ steps.versions.outputs.tfc }}

  grype-scan:
    needs: [build-base, build-agents]
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-result.outputs.result }}
    strategy:
      matrix:
        include:
          - type: base
            platform: linux/amd64
            arch: amd64
          - type: base
            platform: linux/arm64
            arch: arm64
          - type: agent
            platform: linux/amd64
            arch: amd64
            agent: github
          - type: agent
            platform: linux/amd64
            arch: amd64
            agent: tfc
          - type: agent
            platform: linux/amd64
            arch: amd64
            agent: gitlab
          - type: agent
            platform: linux/amd64
            arch: amd64
            agent: azure_devops
          - type: agent
            platform: linux/arm64
            arch: arm64
            agent: github
          - type: agent
            platform: linux/arm64
            arch: arm64
            agent: gitlab
          - type: agent
            platform: linux/arm64
            arch: arm64
            agent: azure_devops
      fail-fast: false
    permissions:
      contents: read
      security-events: write
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Create results directory
        run: mkdir -p results

      - name: Run Grype scan
        id: scan
        continue-on-error: true
        run: |
          echo "Starting Grype scan for ${{ matrix.type }} (${{ matrix.arch }})"
          if [ "${{ matrix.type }}" = "base" ]; then
            grype ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.arch }} \
              -o sarif --file results/results-${{ matrix.type }}-${{ matrix.arch }}.sarif || true
          else
            grype ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ matrix.agent }}-${{ github.sha }}-${{ matrix.arch }} \
              -o sarif --file results/results-${{ matrix.type }}-${{ matrix.agent }}-${{ matrix.arch }}.sarif || true
          fi
          echo "Scan completed. Check SARIF output for any security findings."

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results/results-${{ matrix.type }}${{ matrix.type == 'agent' && format('-{0}', matrix.agent) || '' }}-${{ matrix.arch }}.sarif
          category: scan-${{ matrix.type }}${{ matrix.type == 'agent' && format('-{0}', matrix.agent) || '' }}-${{ matrix.arch }}
          wait-for-processing: true

      - name: Set job result
        id: set-result
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "result=failure" >> $GITHUB_OUTPUT
          fi

  msdo-scan:
    needs: [build-base, build-agents, grype-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      packages: read
      id-token: write
      actions: read
      checks: write
      pull-requests: write
      statuses: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup MSDO configuration
        run: |
          # Create MSDO working directory and SARIF output directory
          mkdir -p /home/runner/work/rover/rover/.gdn/sarif
          
          # Copy configuration files
          cp -f .gdn/*.yaml /home/runner/work/rover/rover/.gdn/
          
          # Verify files were copied
          echo "Verifying configuration files:"
          ls -la /home/runner/work/rover/rover/.gdn/
          cat /home/runner/work/rover/rover/.gdn/msdo-linux.yaml

      - name: Create SARIF output directory
        run: mkdir -p /home/runner/work/rover/rover/.gdn/sarif

      - name: Run MSDO analysis
        uses: microsoft/security-devops-action@v1
        id: msdo
        env:
          GDN_RUN_POLICY: GitHub
          GDN_RUN_CATEGORIES: IaC,containers
          GDN_RUN_TOOLS: terrascan,tfsec,checkov
          GDN_RUN_GITHUB: true
          GDN_RUN_LOGGER_ACTIONS: true
          GDN_RUN_LOGGER_LEVEL: Debug
          GDN_RUN_LOGGER_TIMESTAMP: true
          GDN_RUN_LOGGER_SHOW_LEVEL: true
          GDN_RUN_EXPORT_BREAKING_RESULTS_TO_FILE: sarif
          GDN_RUN_SUCCEED_ON_NO_TOOLS: true
          GDN_RUN_INIT_FORCE: true
          GDN_RUN_INIT_CLEAN: true
          GDN_RUN_CONFIG: /home/runner/work/rover/rover/.gdn/msdo-linux.yaml
          GDN_RUN_SARIF_DIRECTORY: /home/runner/work/rover/rover/.gdn/sarif
        with:
          policy: none
          categories: IaC,containers
          tools: terrascan,tfsec,checkov
          config: /home/runner/work/rover/rover/.gdn/msdo-linux.yaml
      
      - name: Report MSDO scan status
        if: always()
        run: |
          if [ "${{ steps.msdo.outcome }}" != "success" ]; then
            echo "::error::MSDO scan failed with status ${{ steps.msdo.outcome }}"
            exit 1
          fi
          
          # Verify SARIF files exist and are valid
          for file in /home/runner/work/rover/rover/.gdn/sarif/*.sarif; do
            if [ ! -f "$file" ]; then
              echo "::error::SARIF file not found: $file"
              exit 1
            fi
            if ! jq empty "$file" 2>/dev/null; then
              echo "::error::Invalid SARIF file format: $file"
              exit 1
            fi
          done



          echo "Looking for SARIF file: $sarif_file"
          pwd
          find . -name "*.sarif" -type f
          if [ -f "$sarif_file" ]; then
            echo "Found SARIF file:"
            echo "Checking SARIF file structure..."
            jq -r '.runs[].tool.driver | {name, rules_count: (.rules | length)}' "$sarif_file" || true
            echo "Checking artifact locations..."
            jq -r '.runs[].artifacts[] | {location: .location.uri, description: .description.text}' "$sarif_file" || true
            echo "Checking results..."
            jq -r '.runs[].results[] | {ruleId, level, message: .message.text, locations: [.locations[].physicalLocation.artifactLocation.uri]}' "$sarif_file" || true
          else
            echo "SARIF file not found"
          fi

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: ${{ matrix.type == 'base' && format('results/results-{0}-{1}.sarif', matrix.type, matrix.arch) || format('results/results-{0}-{1}-{2}.sarif', matrix.type, matrix.agent, matrix.arch) }}
          category: ${{ matrix.type == 'base' && format('scan-{0}-{1}', matrix.type, matrix.arch) || format('scan-{0}-{1}-{2}', matrix.type, matrix.agent, matrix.arch) }}
          wait-for-processing: true
          checkout_path: ${{ github.workspace }}

  build-report:
    needs: [build-base, build-agents, grype-scan, msdo-scan]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      checks: write
      pull-requests: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate build report
        uses: actions/github-script@v7
        env:
          BUILD_BASE_RESULT: ${{ needs.build-base.result }}
          BUILD_AGENTS_RESULT: ${{ needs.build-agents.result }}
          GRYPE_SCAN_RESULT: ${{ needs.grype-scan.result }}
          MSDO_SCAN_RESULT: ${{ needs.msdo-scan.result }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;
            const buildBaseResult = process.env.BUILD_BASE_RESULT;
            const buildAgentsResult = process.env.BUILD_AGENTS_RESULT;
            const grypeScanResult = process.env.GRYPE_SCAN_RESULT;
            const msdoScanResult = process.env.MSDO_SCAN_RESULT;

            
            // Get all agent build jobs
            const agentJobs = await github.rest.actions.listJobsForWorkflowRun({
              owner,
              repo,
              run_id: context.runId
            });
            
            const agentStatuses = {
              github: { amd64: 'pending', arm64: 'pending' },
              tfc: { amd64: 'pending', arm64: 'n/a' },
              gitlab: { amd64: 'pending', arm64: 'pending' },
              azure_devops: { amd64: 'pending', arm64: 'pending' }
            };
            
            // Parse agent build statuses
            for (const job of agentJobs.data.jobs) {
              if (job.name.startsWith('build-agents')) {
                const match = job.name.match(/build-agents \(platform: (linux\/(?:amd64|arm64)), agent: ([^)]+)\)/);
                if (match) {
                  const arch = match[1].includes('amd64') ? 'amd64' : 'arm64';
                  const agent = match[2];
                  if (agentStatuses[agent]) {
                    agentStatuses[agent][arch] = job.conclusion || job.status;
                  }
                }
              }
            }
            
            // Helper function to get status emoji
            const getStatusEmoji = (agent) => {
              const amd64Status = agentStatuses[agent].amd64;
              const arm64Status = agentStatuses[agent].arm64;
              
              if (arm64Status === 'n/a') {
                return amd64Status === 'success' ? '✅' : '❌';
              }
              return (amd64Status === 'success' && (arm64Status === 'success' || arm64Status === 'n/a')) ? '✅' : '❌';
            };
            
            const buildSummary = [
              '# Build & Security Report',
              '',
              '## Base Image Builds',
              `- linux/amd64: ${buildBaseResult === 'success' ? '✅' : '❌'}`,
              `- linux/arm64: ${buildBaseResult === 'success' ? '✅' : '❌'}`,
              '',
              '## Agent Builds',
              `- github: ${getStatusEmoji('github')} (amd64: ${agentStatuses.github.amd64}, arm64: ${agentStatuses.github.arm64})`,
              `- tfc: ${getStatusEmoji('tfc')} (amd64: ${agentStatuses.tfc.amd64}, arm64: ${agentStatuses.tfc.arm64})`,
              `- gitlab: ${getStatusEmoji('gitlab')} (amd64: ${agentStatuses.gitlab.amd64}, arm64: ${agentStatuses.gitlab.arm64})`,
              `- azure_devops: ${getStatusEmoji('azure_devops')} (amd64: ${agentStatuses.azure_devops.amd64}, arm64: ${agentStatuses.azure_devops.arm64})`,
              '',
              '## Security Scans',
              `- Container security scan: ${grypeScanResult === 'success' ? '✅' : '❌'}`,
              `- MSDO security analysis: ${msdoScanResult === 'success' ? '✅' : '❌'}`,
              '',
              `Overall Status: ${buildBaseResult === 'success' && buildAgentsResult === 'success' && grypeScanResult === 'success' && msdoScanResult === 'success' ? '✅' : '❌'}`,
              '',
              '### Status Details',
              `- Base Build: ${buildBaseResult}`,
              `- Agent Builds: ${buildAgentsResult}`,
              `- Container Security: ${grypeScanResult}`,
              `- MSDO Analysis: ${msdoScanResult}`
            ].join('\n');
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: buildSummary
              });
            }
            
            await github.rest.checks.create({
              owner,
              repo,
              name: 'Build & Security Check',
              head_sha: context.sha,
              status: 'completed',
              conclusion: (() => {
                const agentSuccess = Object.values(agentStatuses).every(agent => 
                  Object.values(agent).every(status => 
                    status === 'success' || status === 'n/a'
                  )
                );
                return buildBaseResult === 'success' && 
                       agentSuccess && 
                       grypeScanResult === 'success' && 
                       msdoScanResult === 'success' ? 'success' : 'failure';
              })(),
              output: {
                title: (() => {
                  const agentSuccess = Object.values(agentStatuses).every(agent => 
                    Object.values(agent).every(status => 
                      status === 'success' || status === 'n/a'
                    )
                  );
                  return `Build Report ${buildBaseResult === 'success' && 
                         agentSuccess && 
                         grypeScanResult === 'success' && 
                         msdoScanResult === 'success' ? '✅' : '❌'}`;
                })(),
                summary: buildSummary
              }
            });
