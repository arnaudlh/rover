---
name: PR Build & Test

# This workflow uses native ARM64 runners (ubuntu-24.04-arm) for ARM64 builds
# instead of QEMU emulation for better performance and compatibility
# Updated to use gzip compression for better compatibility with ARM64 runners

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
    draft: 'false'
  push:
    branches: [main, devin/1740289687-ghcr-migration]

concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

env:
  BUILDKIT_PROGRESS: plain
  BUILDKIT_COLORS: 1
  BUILDKIT_STEP_LOG_MAX_SIZE: 10485760
  BUILDKIT_STEP_LOG_MAX_SPEED: 10485760
  DOCKER_BUILDKIT: true
  DOCKER_SCAN_SUGGEST: false
  BUILDX_NO_DEFAULT_LOAD: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/rover

permissions:
  contents: read
  packages: write
  checks: write
  pull-requests: write
  actions: read
  id-token: write
  statuses: write
  security-events: write

defaults:
  run:
    shell: bash

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.matrix }}
      agents: ${{ steps.agents.outputs.matrix }}
    steps:
      - id: platforms
        run: |
          echo 'matrix=["linux/amd64","linux/arm64"]' >> $GITHUB_OUTPUT
      - id: agents
        run: |
          echo 'matrix=["github","tfc","gitlab","azure_devops"]' >> $GITHUB_OUTPUT

  build-base-amd64:
    needs: matrix-prep
    runs-on: ubuntu-latest
    outputs:
      github_runner: ${{ steps.versions.outputs.github_runner }}
      azdo: ${{ steps.versions.outputs.azdo }}
      tfc: ${{ steps.versions.outputs.tfc }}
      docker_compose: ${{ steps.versions.outputs.docker_compose }}
      golang: ${{ steps.versions.outputs.golang }}
      ansible: ${{ steps.versions.outputs.ansible }}
      azure_cli: ${{ steps.versions.outputs.azure_cli }}
    env:
      ARCH: amd64
      PLATFORM: linux/amd64
    continue-on-error: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/rover
          tags: |
            type=ref,event=pr,prefix=pr-
            type=sha,prefix=pr-

      - name: Parse versions
        id: versions
        run: |
          {
            for tool in vault golang kubectl kubelogin \
              docker_compose terraform_docs packer \
              powershell ansible azure_cli terrascan tfupdate; do
              echo "$tool=$(./scripts/parse_versions.sh tool $tool)"
            done
            echo "terraform=$(./scripts/parse_versions.sh terraform | head -n1)"
          } >> $GITHUB_OUTPUT

      - name: Set build variables
        run: |
          echo "IMAGE_PREFIX=${{ env.REGISTRY }}/${{ github.repository }}/rover" >> $GITHUB_ENV

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          network: host
          allow: network.host
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}:pr-${{ github.sha }}-${{ env.ARCH }}
            ${{ env.IMAGE_PREFIX }}:pr-latest-${{ env.ARCH }}
          target: base
          platforms: linux/amd64
          cache-from: |
            type=gha,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.base_ref }}
            type=gha,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.sha }}
          cache-to: type=gha,mode=max,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.sha }}
          outputs: type=registry,compression=gzip,compression-level=9
          provenance: false
          sbom: false
          build-args: |
            TARGETARCH=${{ env.ARCH }}
            TARGETOS=linux
            USER_UID=1000
            USER_GID=1000
            USERNAME=vscode
            versionVault=${{ steps.versions.outputs.vault }}
            versionGolang=1.22.0
            versionKubectl=${{ steps.versions.outputs.kubectl }}
            versionKubelogin=${{ steps.versions.outputs.kubelogin }}
            versionDockerCompose=${{ steps.versions.outputs.docker_compose }}
            versionTerraformDocs=${{ steps.versions.outputs.terraform_docs }}
            versionPacker=${{ steps.versions.outputs.packer }}
            versionPowershell=${{ steps.versions.outputs.powershell }}
            versionAnsible=${{ steps.versions.outputs.ansible }}
            extensionsAzureCli=${{ steps.versions.outputs.azure_cli }}
            versionTerrascan=${{ steps.versions.outputs.terrascan }}
            versionTfupdate=${{ steps.versions.outputs.tfupdate }}
            versionTerraform=1.7.0
      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

  build-base-arm64:
    needs: matrix-prep
    runs-on: ubuntu-24.04-arm
    outputs:
      github_runner: ${{ steps.versions.outputs.github_runner }}
      azdo: ${{ steps.versions.outputs.azdo }}
      tfc: ${{ steps.versions.outputs.tfc }}
      docker_compose: ${{ steps.versions.outputs.docker_compose }}
      golang: ${{ steps.versions.outputs.golang }}
      ansible: ${{ steps.versions.outputs.ansible }}
      azure_cli: ${{ steps.versions.outputs.azure_cli }}
    env:
      ARCH: arm64
      PLATFORM: linux/arm64
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/rover
          tags: |
            type=ref,event=pr,prefix=pr-
            type=sha,prefix=pr-

      - name: Parse versions
        id: versions
        run: |
          {
            for tool in vault golang kubectl kubelogin \
              docker_compose terraform_docs packer \
              powershell ansible azure_cli terrascan tfupdate; do
              echo "$tool=$(./scripts/parse_versions.sh tool $tool)"
            done
            echo "terraform=$(./scripts/parse_versions.sh terraform | head -n1)"
          } >> $GITHUB_OUTPUT

      - name: Set build variables
        run: |
          echo "IMAGE_PREFIX=${{ env.REGISTRY }}/${{ github.repository }}/rover" >> $GITHUB_ENV

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          network: host
          allow: network.host
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}:pr-${{ github.sha }}-${{ env.ARCH }}
            ${{ env.IMAGE_PREFIX }}:pr-latest-${{ env.ARCH }}
          target: base
          platforms: linux/arm64
          cache-from: |
            type=gha,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.base_ref }}
            type=gha,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.sha }}
          cache-to: type=gha,mode=max,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.sha }}
          outputs: type=registry,compression=gzip,compression-level=9
          provenance: false
          sbom: false
          build-args: |
            TARGETARCH=${{ env.ARCH }}
            TARGETOS=linux
            USER_UID=1000
            USER_GID=1000
            USERNAME=vscode
            versionVault=${{ steps.versions.outputs.vault }}
            versionGolang=1.22.0
            versionKubectl=${{ steps.versions.outputs.kubectl }}
            versionKubelogin=${{ steps.versions.outputs.kubelogin }}
            versionDockerCompose=${{ steps.versions.outputs.docker_compose }}
            versionTerraformDocs=${{ steps.versions.outputs.terraform_docs }}
            versionPacker=${{ steps.versions.outputs.packer }}
            versionPowershell=${{ steps.versions.outputs.powershell }}
            versionAnsible=${{ steps.versions.outputs.ansible }}
            extensionsAzureCli=${{ steps.versions.outputs.azure_cli }}
            versionTerrascan=${{ steps.versions.outputs.terrascan }}
            versionTfupdate=${{ steps.versions.outputs.tfupdate }}
            versionTerraform=1.7.0
      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

  rover-agents-amd64:
    needs: [build-base-amd64, matrix-prep]
    runs-on: ubuntu-latest
    outputs:
      result: success
    env:
      ARCH: amd64
      PLATFORM: linux/amd64
    strategy:
      matrix:
        agent: ["github", "tfc", "gitlab", "azure_devops"]
      fail-fast: false
    continue-on-error: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse agent versions
        id: versions
        run: |
          {
            echo "github_runner=$(./scripts/parse_versions.sh \
              agent github_runner)"
            echo "azdo=$(./scripts/parse_versions.sh agent azdo)"
            echo "tfc=$(./scripts/parse_versions.sh agent tfc)"
          } >> $GITHUB_OUTPUT

      - name: Set build variables
        run: |
          echo "AGENT_PREFIX=${{ env.REGISTRY }}/${{ github.repository }}/rover-agent" >> $GITHUB_ENV

      - name: Build and push agent
        id: build-agent
        uses: docker/build-push-action@v5
        with:
          context: .
          network: host
          allow: network.host
          file: ./agents/${{ matrix.agent }}/Dockerfile
          push: true
          tags: |
            ${{ env.AGENT_PREFIX }}:pr-${{ matrix.agent }}-${{ github.sha }}-${{ env.ARCH }}
            ${{ env.AGENT_PREFIX }}:pr-${{ matrix.agent }}-latest-${{ env.ARCH }}
          platforms: linux/amd64
          cache-from: |
            type=gha,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.base_ref }}
            type=gha,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.sha }}
          cache-to: type=gha,mode=max,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.sha }}
          outputs: type=registry,compression=gzip,compression-level=9
          build-contexts: |
            base=docker-image://${{ env.IMAGE_PREFIX }}:pr-${{ github.sha }}-${{ env.ARCH }}
          provenance: false
          sbom: false
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            GITHUB_REPOSITORY=${{ github.repository }}
            GITHUB_SHA=${{ github.sha }}
            TARGETARCH=${{ env.ARCH }}
            TARGETOS=linux
            USERNAME=vscode
            versionGithubRunner=${{ steps.versions.outputs.github_runner }}
            versionAzdo=${{ steps.versions.outputs.azdo }}
            versionTfc=${{ steps.versions.outputs.tfc }}

  rover-agents-arm64:
    needs: [build-base-arm64, matrix-prep]
    runs-on: ubuntu-24.04-arm
    outputs:
      result: success
    env:
      ARCH: arm64
      PLATFORM: linux/arm64
    strategy:
      matrix:
        agent: ["github", "gitlab", "azure_devops"]
      fail-fast: false
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse agent versions
        id: versions
        run: |
          {
            echo "github_runner=$(./scripts/parse_versions.sh \
              agent github_runner)"
            echo "azdo=$(./scripts/parse_versions.sh agent azdo)"
            echo "tfc=$(./scripts/parse_versions.sh agent tfc)"
          } >> $GITHUB_OUTPUT

      - name: Set build variables
        run: |
          echo "AGENT_PREFIX=${{ env.REGISTRY }}/${{ github.repository }}/rover-agent" >> $GITHUB_ENV

      - name: Build and push agent
        id: build-agent
        uses: docker/build-push-action@v5
        with:
          context: .
          network: host
          allow: network.host
          file: ./agents/${{ matrix.agent }}/Dockerfile
          push: true
          tags: |
            ${{ env.AGENT_PREFIX }}:pr-${{ matrix.agent }}-${{ github.sha }}-${{ env.ARCH }}
            ${{ env.AGENT_PREFIX }}:pr-${{ matrix.agent }}-latest-${{ env.ARCH }}
          platforms: linux/arm64
          cache-from: |
            type=gha,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.base_ref }}
            type=gha,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.sha }}
          cache-to: type=gha,mode=max,scope=pr-${{ github.event.pull_request.number }}-${{ env.PLATFORM }}-${{ github.sha }}
          outputs: type=registry,compression=gzip,compression-level=9
          build-contexts: |
            base=docker-image://${{ env.IMAGE_PREFIX }}:pr-${{ github.sha }}-${{ env.ARCH }}
          provenance: false
          sbom: false
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            GITHUB_REPOSITORY=${{ github.repository }}
            GITHUB_SHA=${{ github.sha }}
            TARGETARCH=${{ env.ARCH }}
            TARGETOS=linux
            USERNAME=vscode
            versionGithubRunner=${{ steps.versions.outputs.github_runner }}
            versionAzdo=${{ steps.versions.outputs.azdo }}
            versionTfc=${{ steps.versions.outputs.tfc }}

  grype-scan-amd64:
    needs: [build-base-amd64, rover-agents-amd64]
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-result.outputs.result }}
    env:
      ARCH: amd64
      PLATFORM: linux/amd64
    strategy:
      matrix:
        type: [base, agent]
        agent: [github, tfc, gitlab, azure_devops]
        exclude:
          - type: base
            agent: github
          - type: base
            agent: tfc
          - type: base
            agent: gitlab
          - type: base
            agent: azure_devops
      fail-fast: false
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image variables
        id: vars
        run: |
          if [[ "${{ matrix.type }}" == "base" ]]; then
            echo "image=${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ env.ARCH }}" >> $GITHUB_OUTPUT
          else
            echo "image=${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ matrix.agent }}-${{ github.sha }}-${{ env.ARCH }}" >> $GITHUB_OUTPUT
          fi

      - name: Pull image
        run: |
          docker pull ${{ steps.vars.outputs.image }}

      - name: Run Grype scan
        id: scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ steps.vars.outputs.image }}
          fail-build: false
          severity-cutoff: high
          output-format: sarif
          only-fixed: false

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          category: grype-${{ matrix.type }}-${{ matrix.agent }}

      - name: Set result
        id: set-result
        if: always()
        run: echo "result=success" >> $GITHUB_OUTPUT

  grype-scan-arm64:
    needs: [build-base-arm64, rover-agents-arm64]
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-result.outputs.result }}
    env:
      ARCH: arm64
      PLATFORM: linux/arm64
    strategy:
      matrix:
        type: [base, agent]
        agent: [github, gitlab, azure_devops]
        exclude:
          - type: base
            agent: github
          - type: base
            agent: gitlab
          - type: base
            agent: azure_devops
      fail-fast: false
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image variables
        id: vars
        run: |
          if [[ "${{ matrix.type }}" == "base" ]]; then
            echo "image=${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ env.ARCH }}" >> $GITHUB_OUTPUT
          else
            echo "image=${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ matrix.agent }}-${{ github.sha }}-${{ env.ARCH }}" >> $GITHUB_OUTPUT
          fi

      - name: Pull image
        run: |
          docker pull ${{ steps.vars.outputs.image }}

      - name: Run Grype scan
        id: scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ steps.vars.outputs.image }}
          fail-build: false
          severity-cutoff: high
          output-format: sarif
          only-fixed: false

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          category: grype-${{ matrix.type }}-${{ matrix.agent }}

      - name: Set result
        id: set-result
        if: always()
        run: echo "result=success" >> $GITHUB_OUTPUT

  msdo-scan:
    needs: [build-base-amd64, rover-agents-amd64]
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-result.outputs.result }}
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Microsoft Security DevOps Analysis
        uses: microsoft/security-devops-action@v1
        id: msdo
        with:
          tools: bandit, eslint, template-analyzer, terrascan, trivy
          categories: code
          policy: microsoft
          break-on-critical: false

      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ${{ steps.msdo.outputs.sarifFile }}
          category: msdo-scan

      - name: Set result
        id: set-result
        if: always()
        run: echo "result=success" >> $GITHUB_OUTPUT

  summary:
    needs: [grype-scan-amd64, grype-scan-arm64, msdo-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| AMD64 Base | ${{ needs.grype-scan-amd64.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ARM64 Base | ${{ needs.grype-scan-arm64.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.msdo-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
