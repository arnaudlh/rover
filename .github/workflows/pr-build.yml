---
name: PR Build & Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILDKIT_PROGRESS: plain
  BUILDKIT_COLORS: 1
  BUILDKIT_STEP_LOG_MAX_SIZE: 10485760
  BUILDKIT_STEP_LOG_MAX_SPEED: 10485760
  DOCKER_BUILDKIT: 1
  DOCKER_SCAN_SUGGEST: false
  BUILDX_NO_DEFAULT_LOAD: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/rover

permissions:
  contents: read
  packages: write
  checks: write
  pull-requests: write
  actions: read
  id-token: write
  statuses: write
  security-events: write

defaults:
  run:
    shell: bash

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.matrix }}
      agents: ${{ steps.agents.outputs.matrix }}
    steps:
      - id: platforms
        run: |
          echo "matrix=[\"linux/amd64\", \"linux/arm64\"]" >> $GITHUB_OUTPUT
      - id: agents
        run: |
          echo "matrix=[\"github\", \"tfc\", \"gitlab\", \"azure_devops\"]" >> $GITHUB_OUTPUT

  build-base:
    needs: matrix-prep
    runs-on: ubuntu-latest
    outputs:
      github_runner: ${{ steps.versions.outputs.github_runner }}
      azdo: ${{ steps.versions.outputs.azdo }}
      tfc: ${{ steps.versions.outputs.tfc }}
      docker_compose: ${{ steps.versions.outputs.docker_compose }}
      golang: ${{ steps.versions.outputs.golang }}
      ansible: ${{ steps.versions.outputs.ansible }}
      azure_cli: ${{ steps.versions.outputs.azure_cli }}
    strategy:
      matrix:
        platform: ${{ fromJson(needs.matrix-prep.outputs.platforms) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/rover
          tags: |
            type=sha,prefix=pr-
            type=ref,event=pr

      - name: Parse versions
        id: versions
        run: |
          echo "vault=$(./scripts/parse_versions.sh tool vault)" >> $GITHUB_OUTPUT
          echo "golang=$(./scripts/parse_versions.sh tool golang)" >> $GITHUB_OUTPUT
          echo "kubectl=$(./scripts/parse_versions.sh tool kubectl)" >> $GITHUB_OUTPUT
          echo "kubelogin=$(./scripts/parse_versions.sh tool kubelogin)" >> $GITHUB_OUTPUT
          echo "docker_compose=$(./scripts/parse_versions.sh tool docker_compose)" >> $GITHUB_OUTPUT
          echo "terraform_docs=$(./scripts/parse_versions.sh tool terraform_docs)" >> $GITHUB_OUTPUT
          echo "packer=$(./scripts/parse_versions.sh tool packer)" >> $GITHUB_OUTPUT
          echo "powershell=$(./scripts/parse_versions.sh tool powershell)" >> $GITHUB_OUTPUT
          echo "ansible=$(./scripts/parse_versions.sh tool ansible)" >> $GITHUB_OUTPUT
          echo "azure_cli=$(./scripts/parse_versions.sh tool azure_cli)" >> $GITHUB_OUTPUT
          echo "terrascan=$(./scripts/parse_versions.sh tool terrascan)" >> $GITHUB_OUTPUT
          echo "tfupdate=$(./scripts/parse_versions.sh tool tfupdate)" >> $GITHUB_OUTPUT
          echo "terraform=$(./scripts/parse_versions.sh terraform | head -n1)" >> $GITHUB_OUTPUT

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          network: host
          allow: |
            network.host
            security.insecure
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-latest-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          target: base
          platforms: ${{ matrix.platform }}
          cache-from: |
            type=gha,scope=pr-${{ matrix.platform }},mode=max
            type=gha,scope=main-${{ matrix.platform }},mode=max
          cache-to: |
            type=gha,mode=max,scope=pr-${{ matrix.platform }},compression=zstd
          outputs: |
            type=registry,compression=zstd,compression-level=3,force-compression=true
            type=image,compression=zstd,compression-level=3,force-compression=true
          provenance: false
          sbom: false
          build-args: |
            TARGETARCH=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USER_UID=1000
            USER_GID=1000
            USERNAME=vscode
            versionVault=${{ steps.versions.outputs.vault }}
            versionGolang=${{ steps.versions.outputs.golang }}
            versionKubectl=${{ steps.versions.outputs.kubectl }}
            versionKubelogin=${{ steps.versions.outputs.kubelogin }}
            versionDockerCompose=${{ steps.versions.outputs.docker_compose }}
            versionTerraformDocs=${{ steps.versions.outputs.terraform_docs }}
            versionPacker=${{ steps.versions.outputs.packer }}
            versionPowershell=${{ steps.versions.outputs.powershell }}
            versionAnsible=${{ steps.versions.outputs.ansible }}
            extensionsAzureCli=${{ steps.versions.outputs.azure_cli }}
            versionTerrascan=${{ steps.versions.outputs.terrascan }}
            versionTfupdate=${{ steps.versions.outputs.tfupdate }}
            versionTerraform=${{ steps.versions.outputs.terraform }}
      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

  build-agents:
    needs: [build-base, matrix-prep]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            agent: github
          - platform: linux/amd64
            agent: tfc
          - platform: linux/amd64
            agent: gitlab
          - platform: linux/amd64
            agent: azure_devops
          - platform: linux/arm64
            agent: github
          - platform: linux/arm64
            agent: gitlab
          - platform: linux/arm64
            agent: azure_devops
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse agent versions
        id: versions
        run: |
          echo "github_runner=$(./scripts/parse_versions.sh agent github_runner)" >> $GITHUB_OUTPUT
          echo "azdo=$(./scripts/parse_versions.sh agent azdo)" >> $GITHUB_OUTPUT
          echo "tfc=$(./scripts/parse_versions.sh agent tfc)" >> $GITHUB_OUTPUT

      - name: Build and push agent
        id: build-agent
        uses: docker/build-push-action@v5
        with:
          context: .
          network: host
          allow: |
            network.host
            security.insecure
          file: ./agents/${{ matrix.agent }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ matrix.agent }}-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ matrix.agent }}-latest
          platforms: ${{ matrix.platform }}
          cache-from: |
            type=gha,scope=pr-agent-${{ matrix.agent }},mode=max
            type=gha,scope=main-agent-${{ matrix.agent }},mode=max
          cache-to: |
            type=gha,mode=max,scope=pr-agent-${{ matrix.agent }},compression=zstd
          outputs: |
            type=registry,compression=zstd,compression-level=3,force-compression=true
            type=image,compression=zstd,compression-level=3,force-compression=true
          build-contexts: |
            base=docker-image://${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          provenance: false
          sbom: false
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            GITHUB_REPOSITORY=${{ github.repository }}
            GITHUB_SHA=${{ github.sha }}
            TARGETARCH=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USERNAME=vscode
            versionGithubRunner=${{ steps.versions.outputs.github_runner }}
            versionAzdo=${{ steps.versions.outputs.azdo }}
            versionTfc=${{ steps.versions.outputs.tfc }}

  trivy-scan:
    needs: [build-base, build-agents]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      packages: read
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            agent: github
          - platform: linux/amd64
            agent: tfc
          - platform: linux/amd64
            agent: gitlab
          - platform: linux/amd64
            agent: azure_devops
          - platform: linux/arm64
            agent: github
          - platform: linux/arm64
            agent: gitlab
          - platform: linux/arm64
            agent: azure_devops
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner for base image
        uses: aquasecurity/trivy-action@0.12.0
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        with:
          scan-type: 'image'
          image-ref: '${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform == "linux/amd64" && "amd64" || "arm64" }}'
          format: 'sarif'
          output: 'trivy-base.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret,config'
          exit-code: '0'

      - name: Run Trivy vulnerability scanner for agent image
        uses: aquasecurity/trivy-action@0.12.0
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        with:
          scan-type: 'image'
          image-ref: '${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ matrix.agent }}-${{ github.sha }}-${{ matrix.platform == "linux/amd64" && "amd64" || "arm64" }}'
          format: 'sarif'
          output: 'trivy-agent.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret,config'
          exit-code: '0'

      - name: Merge SARIF files
        run: |
          jq -s '.[0].runs + .[1].runs | {version: "2.1.0", $schema: "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", runs: .}' trivy-base.sarif trivy-agent.sarif > trivy-results.sarif

      - name: Debug output
        run: |
          pwd
          ls -la
          echo "Text results:"
          cat trivy-results.txt || echo "Text results not found"
          echo "SARIF results:"
          cat trivy-results.sarif || echo "SARIF results not found"

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        continue-on-error: true
        with:
          sarif_file: trivy-results.sarif
          category: 'trivy'
          wait-for-processing: true

  msdo-scan:
    needs: [build-base, build-agents]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - name: Run MSDO scan
        uses: microsoft/security-devops-action@v1
        id: msdo
        with:
          categories: containers
          policy: GitHub
          tools: trivy
          
      - name: Upload MSDO scan results
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.msdo.outputs.sarifFile }}
          category: 'MSDO-${{ matrix.platform }}'
          wait-for-processing: true
          



  build-report:
    needs: [build-base, build-agents, trivy-scan, msdo-scan]
    permissions:
      checks: write
      pull-requests: write
      contents: read
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate build report
        uses: actions/github-script@v7
        env:
          BUILD_BASE_RESULT: ${{ needs.build-base.result }}
          TRIVY_SCAN_RESULT: ${{ needs.trivy-scan.result }}
          MSDO_SCAN_RESULT: ${{ needs.msdo-scan.result }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;
            const buildBaseResult = process.env.BUILD_BASE_RESULT;
            const trivyScanResult = process.env.TRIVY_SCAN_RESULT;
            const msdoScanResult = process.env.MSDO_SCAN_RESULT;
            
            // Get all agent build jobs
            const agentJobs = await github.rest.actions.listJobsForWorkflowRun({
              owner,
              repo,
              run_id: context.runId
            });
            
            const agentStatuses = {
              github: { amd64: 'pending', arm64: 'pending' },
              tfc: { amd64: 'pending', arm64: 'n/a' },
              gitlab: { amd64: 'pending', arm64: 'pending' },
              azure_devops: { amd64: 'pending', arm64: 'pending' }
            };
            
            // Parse agent build statuses
            for (const job of agentJobs.data.jobs) {
              if (job.name.startsWith('build-agents')) {
                const match = job.name.match(/build-agents \((linux\/(amd64|arm64)), ([^)]+)\)/);
                if (match) {
                  const arch = match[2];
                  const agent = match[3];
                  agentStatuses[agent][arch] = job.conclusion || job.status;
                }
              }
            }
            
            // Helper function to get status emoji
            const getStatusEmoji = (agent) => {
              const amd64Status = agentStatuses[agent].amd64;
              const arm64Status = agentStatuses[agent].arm64;
              
              if (arm64Status === 'n/a') {
                return amd64Status === 'success' ? '✅' : 
                       amd64Status === 'pending' ? '⏳' : '❌';
              }
              if (amd64Status === 'success' && arm64Status === 'success') return '✅';
              if (amd64Status === 'pending' || arm64Status === 'pending') return '⏳';
              if (amd64Status === 'success' || arm64Status === 'success') return '⚠️';
              return '❌';
            };
            
            const buildSummary = [
              '# Build & Security Report',
              '',
              '## Base Image Builds',
              `- linux/amd64: ${buildBaseResult === 'success' ? '✅' : '❌'}`,
              `- linux/arm64: ${buildBaseResult === 'success' ? '✅' : '❌'}`,
              '',
              '## Agent Builds',
              `- github: ${getStatusEmoji('github')} (amd64: ${agentStatuses.github.amd64}, arm64: ${agentStatuses.github.arm64})`,
              `- tfc: ${getStatusEmoji('tfc')} (amd64: ${agentStatuses.tfc.amd64}, arm64: ${agentStatuses.tfc.arm64})`,
              `- gitlab: ${getStatusEmoji('gitlab')} (amd64: ${agentStatuses.gitlab.amd64}, arm64: ${agentStatuses.gitlab.arm64})`,
              `- azure_devops: ${getStatusEmoji('azure_devops')} (amd64: ${agentStatuses.azure_devops.amd64}, arm64: ${agentStatuses.azure_devops.arm64})`,
              '',
              '## Security Scans',
              `- Trivy vulnerability scanning: ${trivyScanResult === 'success' ? '✅' : '❌'}`,
              `- MSDO security analysis: ${msdoScanResult === 'success' ? '✅' : '❌'}`,
              `- SARIF reports processed: ${trivyScanResult === 'success' && msdoScanResult === 'success' ? '✅' : '❌'}`,
              '',
              `Overall Status: ${buildBaseResult === 'success' && 
                                Object.values(agentStatuses).every(agent => 
                                  Object.values(agent).every(status => status)) && 
                                trivyScanResult === 'success' && 
                                msdoScanResult === 'success' ? '✅' : '❌'}`
            ].join('\n');
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: buildSummary
              });
            }
            
            await github.rest.checks.create({
              owner,
              repo,
              name: 'Build & Security Check',
              head_sha: context.sha,
              status: 'completed',
              conclusion: (() => {
                const agentSuccess = Object.values(agentStatuses).every(agent => 
                  Object.values(agent).every(status => 
                    status === 'success' || status === 'n/a'
                  )
                );
                return buildBaseResult === 'success' && 
                       agentSuccess && 
                       trivyScanResult === 'success' && 
                       msdoScanResult === 'success' ? 'success' : 'failure';
              })(),
              output: {
                title: (() => {
                  const agentSuccess = Object.values(agentStatuses).every(agent => 
                    Object.values(agent).every(status => 
                      status === 'success' || status === 'n/a'
                    )
                  );
                  return `Build Report ${buildBaseResult === 'success' && 
                                      agentSuccess && 
                                      trivyScanResult === 'success' && 
                                      msdoScanResult === 'success' ? '✅' : '❌'}`;
                })(),
                summary: buildSummary
              }
            });
