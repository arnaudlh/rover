---
name: PR Build & Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILDKIT_PROGRESS: plain
  BUILDKIT_COLORS: 1
  BUILDKIT_STEP_LOG_MAX_SIZE: 10485760
  BUILDKIT_STEP_LOG_MAX_SPEED: 10485760
  DOCKER_BUILDKIT: 1
  DOCKER_SCAN_SUGGEST: false
  BUILDX_NO_DEFAULT_LOAD: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/rover

permissions:
  contents: read
  packages: write
  checks: write
  pull-requests: write
  actions: read
  id-token: write
  statuses: write
  security-events: write

defaults:
  run:
    shell: bash

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.matrix }}
      agents: ${{ steps.agents.outputs.matrix }}
    steps:
      - id: platforms
        run: |
          echo "matrix=[\"linux/amd64\", \"linux/arm64\"]" >> $GITHUB_OUTPUT
      - id: agents
        run: |
          echo "matrix=[\"github\", \"tfc\", \"gitlab\", \"azure_devops\"]" >> $GITHUB_OUTPUT

  build-base:
    needs: matrix-prep
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.matrix-prep.outputs.platforms) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/rover
          tags: |
            type=sha,prefix=pr-
            type=ref,event=pr

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          network: host
          allow: |
            network.host
            security.insecure
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-latest-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          target: base
          platforms: ${{ matrix.platform }}
          cache-from: |
            type=gha,scope=pr-${{ github.event.pull_request.number }}-${{ matrix.platform }},mode=max,sharing=private
            type=gha,scope=main-${{ matrix.platform }},mode=max,sharing=locked
          cache-to: type=gha,mode=max,scope=pr-${{ github.event.pull_request.number }}-${{ matrix.platform }}-${{ github.sha }},compression=zstd,sharing=private
          outputs: type=registry,compression=zstd
          provenance: false
          sbom: false
          build-args: |
            TARGETARCH=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USER_UID=1000
            USER_GID=1000
            USERNAME=vscode
            versionVault=$(./scripts/parse_versions.sh tool vault)
            versionGolang=$(./scripts/parse_versions.sh tool golang)
            versionKubectl=$(./scripts/parse_versions.sh tool kubectl)
            versionKubelogin=$(./scripts/parse_versions.sh tool kubelogin)
            versionDockerCompose=$(./scripts/parse_versions.sh tool docker_compose)
            versionTerraformDocs=$(./scripts/parse_versions.sh tool terraform_docs)
            versionPacker=$(./scripts/parse_versions.sh tool packer)
            versionPowershell=$(./scripts/parse_versions.sh tool powershell)
            versionAnsible=$(./scripts/parse_versions.sh tool ansible)
            extensionsAzureCli=$(./scripts/parse_versions.sh tool azure_cli)
            versionTerrascan=$(./scripts/parse_versions.sh tool terrascan)
            versionTfupdate=$(./scripts/parse_versions.sh tool tfupdate)
            versionTerraform=$(./scripts/parse_versions.sh terraform | head -n1)
          
      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

  build-agents:
    needs: [build-base, matrix-prep]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.matrix-prep.outputs.platforms) }}
        agent: ${{ fromJson(needs.matrix-prep.outputs.agents) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push agent
        id: build-agent
        uses: docker/build-push-action@v5
        with:
          context: .
          network: host
          allow: |
            network.host
            security.insecure
          file: ./agents/${{ matrix.agent }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-${{ matrix.agent }}
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-latest-${{ matrix.platform }}-${{ matrix.agent }}
          platforms: ${{ matrix.platform }}
          cache-from: |
            type=gha,scope=pr-${{ github.event.pull_request.number }}-agent-${{ matrix.platform }}-${{ matrix.agent }},mode=max,sharing=private
            type=gha,scope=main-agent-${{ matrix.platform }}-${{ matrix.agent }},mode=max,sharing=locked
          cache-to: type=gha,mode=max,scope=pr-${{ github.event.pull_request.number }}-agent-${{ matrix.platform }}-${{ matrix.agent }}-${{ github.sha }},compression=zstd
          outputs: type=registry,compression=zstd,force-compression=true
          build-contexts: |
            base=docker-image://${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          provenance: false
          sbom: false
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            GITHUB_REPOSITORY=${{ github.repository }}
            GITHUB_SHA=${{ github.sha }}
            TARGETARCH=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USERNAME=vscode
            versionGithubRunner=$(./scripts/parse_versions.sh tool github_runner)
            versionAzdo=$(./scripts/parse_versions.sh tool azdo)
            versionTfc=$(./scripts/parse_versions.sh tool tfc)
            versionDockerCompose=$(./scripts/parse_versions.sh tool docker_compose)
            versionGolang=$(./scripts/parse_versions.sh tool golang)
            versionAnsible=$(./scripts/parse_versions.sh tool ansible)
            extensionsAzureCli=$(./scripts/parse_versions.sh tool azure_cli)
          
  trivy-scan:
    needs: [build-base, build-agents]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
      fail-fast: false
    steps:
      - name: Run Trivy scan for base image
        uses: aquasecurity/trivy-action@master
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          format: 'sarif'
          output: 'trivy-results-base-${{ matrix.platform }}.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload base image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: 'trivy-results-base-${{ matrix.platform }}.sarif'
          category: 'Trivy-Base-${{ matrix.platform }}'
          wait-for-processing: true
          
      - name: Run Trivy scans for agents
        uses: aquasecurity/trivy-action@master
        with:
          image: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-github
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-tfc
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-gitlab
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-azure_devops
          format: 'sarif'
          output: 'trivy-results-agents-${{ matrix.platform }}.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload agent scan results
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: 'trivy-results-agents-${{ matrix.platform }}.sarif'
          category: 'Trivy-Agents-${{ matrix.platform }}'
          wait-for-processing: true

  msdo-scan:
    needs: [build-base, build-agents]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - name: Run MSDO scan for base image
        uses: microsoft/security-devops-action@v1
        id: msdo-base
        with:
          categories: containers
          policy: GitHub
          tools: trivy
          github-token: ${{ secrets.GITHUB_TOKEN }}
          image: ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          
      - name: Upload MSDO scan results for base image
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.msdo-base.outputs.sarifFile }}
          category: 'MSDO-Base-${{ matrix.platform }}'
          wait-for-processing: true
          
      - name: Run MSDO scan for agents
        uses: microsoft/security-devops-action@v1
        id: msdo-agents
        with:
          categories: containers
          policy: GitHub
          tools: trivy
          github-token: ${{ secrets.GITHUB_TOKEN }}
          image: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-github
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-tfc
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-gitlab
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-azure_devops
          
      - name: Upload MSDO scan results for agents
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.msdo-agents.outputs.sarifFile }}
          category: 'MSDO-Agents-${{ matrix.platform }}'
          wait-for-processing: true


  build-report:
    needs: [build-base, build-agents, trivy-scan, msdo-scan]
    permissions:
      checks: write
      pull-requests: write
      contents: read
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate build report
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;
            const status = needs.build-base.result === 'success' && 
                          needs.build-agents.result === 'success' && 
                          needs.trivy-scan.result === 'success' && 
                          needs.msdo-scan.result === 'success' ? '✅' : '❌';
            
            const buildSummary = [
              '# Build & Security Report',
              '',
              '## Base Image Builds',
              `- linux/amd64: ${needs.build-base.result === 'success' ? '✅' : '❌'}`,
              `- linux/arm64: ${needs.build-base.result === 'success' ? '✅' : '❌'}`,
              '',
              '## Agent Builds',
              `- github: ${needs.build-agents.result === 'success' ? '✅' : '❌'}`,
              `- tfc: ${needs.build-agents.result === 'success' ? '✅' : '❌'}`,
              `- gitlab: ${needs.build-agents.result === 'success' ? '✅' : '❌'}`,
              `- azure_devops: ${needs.build-agents.result === 'success' ? '✅' : '❌'}`,
              '',
              '## Security Scans',
              `- Trivy vulnerability scanning: ${needs.trivy-scan.result === 'success' ? '✅' : '❌'}`,
              `- MSDO security analysis: ${needs.msdo-scan.result === 'success' ? '✅' : '❌'}`,
              `- SARIF reports processed: ${needs.trivy-scan.result === 'success' && needs.msdo-scan.result === 'success' ? '✅' : '❌'}`,
              '',
              `Overall Status: ${status}`
            ].join('\n');
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: buildSummary
              });
            }
            
            await github.rest.checks.create({
              owner,
              repo,
              name: 'Build & Security Check',
              head_sha: context.sha,
              status: 'completed',
              conclusion: status === '✅' ? 'success' : 'failure',
              output: {
                title: `Build Report ${status}`,
                summary: buildSummary
              }
            });
