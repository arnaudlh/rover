name: PR Build & Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  checks: write
  pull-requests: write
  actions: read
  id-token: write
  statuses: write
  security-events: write

defaults:
  run:
    shell: bash

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/rover
  BUILDX_NO_DEFAULT_LOAD: true
  DOCKER_BUILDKIT: 1

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.matrix }}
      agents: ${{ steps.agents.outputs.matrix }}
    steps:
      - id: platforms
        run: |
          echo "matrix=[\"linux/amd64\", \"linux/arm64\"]" >> $GITHUB_OUTPUT
      - id: agents
        run: |
          echo "matrix=[\"github\", \"tfc\", \"gitlab\", \"azure_devops\"]" >> $GITHUB_OUTPUT

  build-base:
    needs: matrix-prep
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.matrix-prep.outputs.platforms) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/rover
          tags: |
            type=sha,prefix=pr-
            type=ref,event=pr

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-latest-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          target: base
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ github.ref_name }}-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-${{ matrix.platform }}
          provenance: false
          sbom: false
          build-args: |
            TARGETARCH=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USER_UID=1000
            USER_GID=1000
            USERNAME=vscode
            versionVault=1.15.0
            versionGolang=1.21.6
            versionKubectl=1.28.4
            versionKubelogin=0.1.0
            versionDockerCompose=2.24.1
            versionTerraformDocs=0.17.0
            versionPacker=1.10.0
            versionPowershell=7.4.1
            versionAnsible=2.16.2
            extensionsAzureCli=aks-preview
            versionTerrascan=1.18.3
            versionTfupdate=0.7.2
            versionTerraform=1.7.4
          
      - name: Run MSDO scan for base image
        uses: microsoft/security-devops-action@v1
        id: msdo-base
        with:
          categories: containers
          policy: GitHub
          tools: trivy
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload MSDO scan results for base image
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.msdo-base.outputs.sarifFile }}
          category: 'MSDO-Base-${{ matrix.platform }}'
          wait-for-processing: true

      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

  build-agents:
    needs: [build-base, matrix-prep]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.matrix-prep.outputs.platforms) }}
        agent: ${{ fromJson(needs.matrix-prep.outputs.agents) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push agent
        id: build-agent
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./agents/${{ matrix.agent }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-${{ matrix.agent }}
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-latest-${{ matrix.platform }}-${{ matrix.agent }}
          platforms: ${{ matrix.platform }}
          cache-from: |
            type=gha,scope=${{ github.ref_name }}-agent-${{ matrix.platform }}-${{ matrix.agent }}
            type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-latest-${{ matrix.platform }}-${{ matrix.agent }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-agent-${{ matrix.platform }}-${{ matrix.agent }}
          provenance: false
          sbom: false
          build-args: |
            TARGETARCH=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USERNAME=vscode

      - name: Run MSDO scan for agent
        uses: microsoft/security-devops-action@v1
        id: msdo-agent
        with:
          categories: containers
          policy: GitHub
          tools: trivy
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload MSDO scan results for agent
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.msdo-agent.outputs.sarifFile }}
          category: 'MSDO-Agent-${{ matrix.platform }}-${{ matrix.agent }}'
          wait-for-processing: true


          
  build-report:
    needs: [build-base, build-agents]
    permissions:
      checks: write
      pull-requests: write
      contents: read
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate build report
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            
            const buildSummary = [
              '# Build & Security Report',
              '',
              '## Base Image Builds',
              '- linux/amd64',
              '- linux/arm64',
              '',
              '## Agent Builds',
              '- github',
              '- tfc',
              '- gitlab',
              '- azure_devops',
              '',
              '## Security Scans',
              '- MSDO analysis complete (includes container security scanning)',
              '- SARIF reports processed',
              '',
              `Overall Status: ${status}`
            ].join('\n');
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: buildSummary
              });
            }
            
            await github.rest.checks.create({
              owner,
              repo,
              name: 'Build & Security Check',
              head_sha: context.sha,
              status: 'completed',
              conclusion: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              output: {
                title: `Build Report ${status}`,
                summary: buildSummary
              }
            });
