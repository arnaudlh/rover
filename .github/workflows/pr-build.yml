name: PR Build & Test

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - 'devin/**'
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  checks: write
  pull-requests: write
  actions: write
  id-token: write
  statuses: write
  security-events: write

defaults:
  run:
    shell: bash

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/rover
  BUILDX_NO_DEFAULT_LOAD: true
  DOCKER_BUILDKIT: 1

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.matrix }}
      agents: ${{ steps.agents.outputs.matrix }}
    steps:
      - id: platforms
        run: |
          echo "matrix=[\"linux/amd64\", \"linux/arm64\"]" >> $GITHUB_OUTPUT
      - id: agents
        run: |
          echo "matrix=[\"github\", \"tfc\", \"gitlab\", \"azure_devops\"]" >> $GITHUB_OUTPUT

  build-base:
    needs: matrix-prep
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.matrix-prep.outputs.platforms) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/rover
          tags: |
            type=sha,prefix=pr-
            type=ref,event=pr

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
          buildkitd-flags: --debug

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform }}
            ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-latest-${{ matrix.platform }}
          target: base
          platforms: ${{ matrix.platform }}
          cache-from: |
            type=gha,scope=${{ github.ref_name }}-${{ matrix.platform }}
            type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-latest-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-${{ matrix.platform }}
          allow: |
            network.host
            security.insecure
          outputs: type=image,push=true
          provenance: false
          sbom: false
          build-args: |
            TARGETARCH=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USER_UID=1000
            USER_GID=1000
            USERNAME=vscode
            versionVault=1.15.0
            versionGolang=1.21.6
            versionKubectl=1.28.4
            versionKubelogin=0.1.0
            versionDockerCompose=2.24.1
            versionTerraformDocs=0.17.0
            versionPacker=1.10.0
            versionPowershell=7.4.1
            versionAnsible=2.16.2
            extensionsAzureCli=aks-preview
            versionTerrascan=1.18.3
            versionTfupdate=0.7.2
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform }}'
          format: 'table'
          output: 'trivy-results-${{ matrix.platform }}.txt'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-${{ matrix.platform }}
          path: trivy-results-${{ matrix.platform }}.txt
          
      - name: Run Trivy for SARIF output
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          image-ref: 'ghcr.io/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.platform }}.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.platform }}.sarif'
          category: 'Trivy-${{ matrix.platform }}'

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Report build status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            const buildId = '${{ steps.build.outputs.digest }}' || 'N/A';
            const dockerVersion = '${{ steps.build.outputs.docker-version }}' || 'N/A';
            const buildkitVersion = '${{ steps.build.outputs.buildkit-version }}' || 'N/A';
            const trivyStatus = process.env.TRIVY_EXIT_CODE === '0' ? '✅' : '❌';
            
            const body = [
              `Build Status: ${status}`,
              '',
              'Build Information:',
              '- Platforms: linux/amd64',
              `- SHA: ${context.sha}`,
              `- Build ID: ${buildId}`,
              '- Security: Trivy scan results uploaded to Security tab',
              '',
              'Status Details:',
              `- Build: ${status}`,
              `- Security Scan: ${trivyStatus}`,
              '',
              'Debug Information:',
              `- Docker Version: ${dockerVersion}`,
              `- BuildKit Version: ${buildkitVersion}`
            ].join('\n');
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body
              });
            }
            
            const conclusion = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.checks.create({
              owner,
              repo,
              name: 'Build & Security Check',
              head_sha: context.sha,
              status: 'completed',
              conclusion,
              output: {
                title: `Build ${status}`,
                summary: body
              }
            });

  build-agents:
    needs: [matrix-prep, build-base]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.matrix-prep.outputs.platforms) }}
        agent: ${{ fromJson(needs.matrix-prep.outputs.agents) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
          buildkitd-flags: --debug

      - name: Build and push agent
        id: build-agent
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./agents/${{ matrix.agent }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-${{ matrix.agent }}
            ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-latest-${{ matrix.platform }}-${{ matrix.agent }}
          platforms: ${{ matrix.platform }}
          cache-from: |
            type=gha,scope=${{ github.ref_name }}-agent-${{ matrix.platform }}-${{ matrix.agent }}
            type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-latest-${{ matrix.platform }}-${{ matrix.agent }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-agent-${{ matrix.platform }}-${{ matrix.agent }}
          allow: |
            network.host
            security.insecure
          outputs: type=image,push=true
          provenance: false
          sbom: false
          build-args: |
            TARGETARCH=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            TARGETOS=linux
            USERNAME=vscode

      - name: Run Trivy vulnerability scanner for agent
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-${{ matrix.agent }}'
          format: 'table'
          output: 'trivy-results-agent-${{ matrix.platform }}-${{ matrix.agent }}.txt'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results for agent
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-agent-${{ matrix.platform }}-${{ matrix.agent }}
          path: trivy-results-agent-${{ matrix.platform }}-${{ matrix.agent }}.txt

      - name: Run Trivy for SARIF output for agent
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          image-ref: '${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-${{ matrix.agent }}'
          format: 'sarif'
          output: 'trivy-results-agent-${{ matrix.platform }}-${{ matrix.agent }}.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab for agent
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-agent-${{ matrix.platform }}-${{ matrix.agent }}.sarif'
          category: 'Trivy-Agent-${{ matrix.platform }}-${{ matrix.agent }}'

      - name: Report agent build status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            
            const body = [
              `Agent Build Status: ${status}`,
              '',
              'Build Information:',
              `- Platform: ${{ matrix.platform }}`,
              `- Agent: ${{ matrix.agent }}`,
              `- SHA: ${context.sha}`,
              '- Security: Trivy scan results uploaded to Security tab',
              '',
              'Status Details:',
              `- Build: ${status}`,
              `- Security Scan: ${process.env.TRIVY_EXIT_CODE === '0' ? '✅' : '❌'}`
            ].join('\n');
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body
              });
            }
            
            const conclusion = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.checks.create({
              owner,
              repo,
              name: `Build & Security Check - Agent ${{ matrix.agent }} (${{ matrix.platform }})`,
              head_sha: context.sha,
              status: 'completed',
              conclusion,
              output: {
                title: `Agent Build ${status}`,
                summary: body
              }
            });

  msdo:
    needs: [build-base, build-agents]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJson(needs.matrix-prep.outputs.platforms) }}
        agent: ${{ fromJson(needs.matrix-prep.outputs.agents) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      # Scan base image
      - uses: microsoft/security-devops-action@v1
        id: msdo-base
        with:
          tools: trivy,bandit,binskim,templateanalyzer
          categories: IaC,containers,python,general
          image: ${{ env.REGISTRY }}/${{ github.repository }}/rover:pr-${{ github.sha }}-${{ matrix.platform }}
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.msdo-base.outputs.sarifFile }}
          category: 'MSDO-Base-${{ matrix.platform }}'
          
      # Scan agent image
      - uses: microsoft/security-devops-action@v1
        id: msdo-agent
        with:
          tools: trivy,bandit,binskim,templateanalyzer
          categories: IaC,containers,python,general
          image: ${{ env.REGISTRY }}/${{ github.repository }}/rover-agent:pr-${{ github.sha }}-${{ matrix.platform }}-${{ matrix.agent }}
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.msdo-agent.outputs.sarifFile }}
          category: 'MSDO-Agent-${{ matrix.platform }}-${{ matrix.agent }}'
